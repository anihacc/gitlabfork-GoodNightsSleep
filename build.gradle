/*
 * GradleWorks for ForgeGradle 4/3
 * Written by Jonathing
 * Version 3.3.2-ML
 *
 * What was once just an effort to make life easier is now a fully-fledged buildscript that does almost all of the work
 * for you! The only things you will need to take care of yourself are dependencies, but that shouldn't be too big of a
 * deal. Anything you'll most likely ever need to change can be found in gradle.properties. Enjoy!
 */

// This is here for a funny little hack with the run configs
import net.minecraftforge.gradle.common.util.ModConfig

// Buildscript setup (DO NOT EDIT!!!)
buildscript {
	repositories {
		// Minecraft Forge Maven
		maven { url 'https://maven.minecraftforge.net' }

		// SpongePowered Maven
		maven { url 'https://repo.spongepowered.org/maven' }

		// Maven Central
		mavenCentral()
	}
	dependencies {
		// Minecraft Forge ForgeGradle
		if (!(project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true')) {
			classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
		} else {
			classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
		}

		// SpongePowered MixinGradle
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
	}
}

ext {
	timeOfExecution = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
}

println('GradleWorks for ForgeGradle '.concat(project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true' ? '3' : '4'))
println('Written by Jonathing')
println('Version 3.3.2')

// ForgeGradle - The heart and soul of the buildscript and the development environment.
apply plugin: 'net.minecraftforge.gradle'
// MixinGradle - Adds mixin support to the development environment.
if (project.hasProperty('mixin_version')) {
	if (!project.extensions.findByName('eclipse')) {
		println()
	}
	apply plugin: 'org.spongepowered.mixin'
}

// Eclipse - Adds compatibility for Eclipse workspaces.
apply plugin: 'eclipse'
// Signing - Adds the ability to sign jars.
apply plugin: 'signing'
// Maven Publishing - Used to be able to publish to maven repositories.
apply plugin: 'maven-publish'

// Detects if the OS is macOS. Required for the workaround in genData.
static def isOsx() {
	def osProp = System.properties['os.name'].toLowerCase()
	return osProp.contains('darwin') || osProp.contains('osx') || osProp.contains('mac')
}; project.ext.isOsx = { return isOsx() }

// Get the mod version from gradle.properties
version = "${mod_version}"
// Get the mod group from gradle.properties
group = "${mod_group}"
// Get the archives base name from the mod id and the Minecraft version.
archivesBaseName = "${mod_id}-${mc_version}"

// this variable points to where the latest built file is placed for usage in publish.gradle
project.ext.reobfFile = file("build/libs/${archivesBaseName}-${version}.jar".toString())

// This file contains additional instructions for signing builds of this mod (see the file for more details).
apply from: 'signing.gradle'
// This file contains additional instructions for publishing builds of this mod to maven repositories (commented out by default, see the file for more details).
apply from: 'publish.gradle'

// Ensure that the IDE knows that this project is for Java 8 (or at the least, SDK level 8) and nothing else.
if (!(project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true')) {
	java.toolchain.languageVersion = JavaLanguageVersion.of(8)
} else {
	sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
}

// This section prints out the Java, Minecraft, and Mod info just to double check all the values are correct.
// It is printed on every build, so make sure you double check!
println()
println('Java Information')
println('- Java: ' + System.getProperty('java.version'))
println('- JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ')')
println('- Arch: ' + System.getProperty('os.arch'))
println()
println('Minecraft Information')
println('- Minecraft: ' + "${mc_version}".toString())
println('- Minecraft Forge: ' + "${forge_version}".toString())
println('- Mappings: ' + "${mappings_version} ${mappings_channel}".toString())
println()
println('Mod Information')
println('- ID: ' + "${mod_id}".toString())
println('- Name: ' + "${mod_name}".toString())
println('- Version: ' + "${version}".toString())

// This section prints out information for Structure Gel API to make sure its values are correct.
// It is commented out by default in case this specific project does not need compatibility with Structure Gel API.
// ML exclusive
if (project.hasProperty('gel_version')) {
	println()
	println('Structure Gel API Information')
	println('- ID: structure_gel')
	println('- Name: Structure Gel API')
	println('- Version: ' + "${mc_version}-${gel_version}".toString())
}

// Any repositories for dependencies go here. Feel free to add to them as needed.
repositories {
	// CurseMaven
	maven {
		url "https://www.cursemaven.com"
		if (!(project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true')) {
			content {
				includeGroup "curse.maven"
			}
		}
	}

	// Modding Legacy Maven (ML exclusive)
	maven {
		name "ModdingLegacyMaven"
		url "https://maven.moddinglegacy.com/maven"
	}
}

// Minecraft setup
minecraft {
	// Mappings to use for the project. See default MDK for mappings instructions.
	mappings channel: "${mappings_channel}".toString(), version: "${mappings_version}".toString()

	// Access Transformer (commented out by default)
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Run configurations
	runs {
		// Client run configuration
		client {
			// The directory for Minecraft to run in
			workingDirectory project.file('run')

			// Enable mixins if installed (comment out if using a MixinConnector)
			if (project.hasProperty('mixin_version')) {
				arg "-mixin.config=${mod_id}.mixins.json".toString()
			}

			// Enable Structure Gel API mixins if installed (ML exclusive)
			if (project.hasProperty('gel_version')) {
				arg '-mixin.config=structure_gel.mixins.json'
			}

			// Remaps refmaps to workspace mappings for mixin
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()

			// Logging markers for Forge. See default MDK for instructions
			property 'forge.logging.markers', 'REGISTRIES'

			// Console logging level (debug by default, change to info if it's too much)
			property 'forge.logging.console.level', 'debug'

			// Tells the mod if it is running in an IDE (must be configured in your project, but not required)
			property "${mod_id}.iside".toString(), 'true'

			// Add the mod's main source set to the total mods in the run configuration
			ModConfig modConfig = new ModConfig(project, "${mod_id}".toString())
			modConfig.source(sourceSets.main)
			mods.add(modConfig)
		}

		// Server run configuration
		server {
			// The directory for Minecraft to run in
			workingDirectory project.file('run')

			// Enable mixins if installed (comment out if using a MixinConnector)
			if (project.hasProperty('mixin_version')) {
				arg "-mixin.config=${mod_id}.mixins.json".toString()
			}

			// Enable Structure Gel API mixins if installed (ML exclusive)
			if (project.hasProperty('gel_version')) {
				arg '-mixin.config=structure_gel.mixins.json'
			}

			// Additional arguments exclusive to the server (nogui by default, separated by ",")
			args 'nogui'

			// Remaps refmaps to workspace mappings for mixin
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()

			// Logging markers for Forge. See default MDK for instructions
			property 'forge.logging.markers', 'REGISTRIES'

			// Console logging level (debug by default, change to info if it's too much)
			property 'forge.logging.console.level', 'debug'

			// Tells the mod if it is running in an IDE (must be configured in your project, but not required)
			property "${mod_id}.iside".toString(), 'true'

			// Add the mod's main source set to the total mods in the run configuration
			ModConfig modConfig = new ModConfig(project, "${mod_id}".toString())
			modConfig.source(sourceSets.main)
			mods.add(modConfig)
		}

		// Data run configuration
		data {
			// The directory for Minecraft to run in
			workingDirectory project.file('run')

			// Enable mixins if installed (comment out if using a MixinConnector)
			if (project.hasProperty('mixin_version')) {
				arg "-mixin.config=${mod_id}.mixins.json".toString()
			}

			// Enable Structure Gel API mixins if installed (ML exclusive)
			if (project.hasProperty('gel_version')) {
				arg '-mixin.config=structure_gel.mixins.json'
			}

			// Additional arguments exclusive to data generation (do NOT change these unless necessary)
			args '--mod', "${mod_id}".toString(), '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			// Remaps refmaps to workspace mappings for mixin
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()

			// Logging markers for Forge. See default MDK for instructions
			property 'forge.logging.markers', 'REGISTRIES'

			// Console logging level (debug by default, change to info if it's too much)
			property 'forge.logging.console.level', 'debug'

			// Tells the mod if it is running in an IDE (must be configured in your project, but not required)
			property "${mod_id}.iside".toString(), 'true'

			// Tells the mod if it is running datagen (must be configured in your project, but not required)
			property "${mod_id}.datagen".toString(), 'true'

			// Workaround for https://github.com/MinecraftForge/ForgeGradle/issues/690
			// Written by Shadew
			if (project.ext.isOsx()) {
				jvmArg('-XstartOnFirstThread')
			}

			// Add the mod's main source set to the total mods in the run configuration
			ModConfig modConfig = new ModConfig(project, "${mod_id}".toString())
			modConfig.source(sourceSets.main)
			mods.add(modConfig)
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Ensure the reference map is included in the source sets
if (project.hasProperty('mixin_version')) {
	mixin {
		add sourceSets.main, "${mod_id}.refmap.json"
	}
}

// Dependencies to use in this project
dependencies {
	// Minecraft Forge
	minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}".toString()

	// Mixin processor
	if (!(project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true')) {
		if (project.hasProperty('mixin_version')) {
			annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor".toString()
		}
	}

	// Lazy DataFixerUpper(LazyDFU) [FORGE]
	if (project.hasProperty('lazydfu_file_id')) {
		runtimeOnly fg.deobf("curse.maven:lazy-dfu-forge-460819:${lazydfu_file_id}".toString())
	}

	// Structure Gel API (ML exclusive)
	if (project.hasProperty('gel_version')) {
		implementation fg.deobf("com.legacy:structure-gel:${gel_version}".toString())
	}
}

// Attributes to include in the built jar file
jar {
	manifest {
		if (project.hasProperty('mixin_version')) {
			attributes([
					'Specification-Title'     : "${mod_id}".toString(),
					'Specification-Vendor'    : "${mod_author}".toString(),
					'Specification-Version'   : "1",
					'Implementation-Title'    : project.name,
					'Implementation-Version'  : project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true' ? "${version}".toString() : "${archiveVersion.getOrNull()}".toString(),
					'Implementation-Vendor'   : "${mod_author}".toString(),
					'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					'MixinConfigs'            : "${mod_id}.mixins.json".toString()
					// If you prefer to use a MixinConnector, feel free to do so; remember to uncomment the specified lines
					//'MixinConnector'          : 'your.package.here.MixinConnector'
			])
		} else {
			attributes([
					'Specification-Title'     : "${mod_id}".toString(),
					'Specification-Vendor'    : "${mod_author}".toString(),
					'Specification-Version'   : "1",
					'Implementation-Title'    : project.name,
					'Implementation-Version'  : project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true' ? "${version}".toString() : "${archiveVersion.getOrNull()}".toString(),
					'Implementation-Vendor'   : "${mod_author}".toString(),
					'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
			])
		}
	}
}
