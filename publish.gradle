/*
 * GradleWorks for ForgeGradle 4/3
 * Written by Jonathing
 * Version 3.3.2-ML
 *
 * This gradle file contains additional instructions for publishing builds of this mod to the Modding Legacy Maven
 * repository. To enable publishing to the maven, uncomment the respective lines at the top of the build.gradle file.
 * For more information on publishing to the ML Maven, talk to Jonathing.
 */

// shoves all of the sources in a jar
task sourcesJar(type: Jar, dependsOn: classes) {
	if (!(project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true')) {
		archiveClassifier.set('sources')
	} else {
		classifier = 'sources'
	}
	from sourceSets.main.allSource
}

// shoves all of the sources and deobf compiled classes in a jar
task deobfJar(type: Jar, dependsOn: classes) {
	if (!(project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true')) {
		archiveClassifier.set('deobf')
	} else {
		classifier = 'deobf'
	}
	from sourceSets.main.java.sourceDirectories
	from sourceSets.main.output
}

// generates the javadocs and shoves them in a jar
task javadocJar(type: Jar) {
	from javadoc
	if (!(project.hasProperty('use_forgegradle3') && "${use_forgegradle3}".toString() == 'true')) {
		archiveClassifier.set('javadoc')
	} else {
		classifier = 'javadoc'
	}
}

// Ensures that the mod is built before it is published to the maven
publish {
	dependsOn 'build'
}

publishing {
	publications {
		// Get the main jar, sources jar, and javadoc jars for publishing
		mavenJava(MavenPublication) {
			groupId = "${maven_group}".toString()
			artifactId = "${maven_artifact_id}".toString()
			version = "${mc_version}-${version}".toString()

			artifact reobfFile // main jar
			artifact sourcesJar // sources jar
			artifact javadocJar // javadoc jar
		}
	}
	repositories {
		// Modding Legacy Maven (ML exclusive)
		maven {
			name "ModdingLegacyMaven"
			url uri("https://maven.moddinglegacy.com/artifactory/modding-legacy/")
			credentials {
				username = project.findProperty("mlm.user") ?: System.getenv("ML_USERNAME")
				password = project.findProperty("mlm.key") ?: System.getenv("ML_TOKEN")
			}
		}

		// Test Maven repository located in the "mcmodsrepo" folder
		maven {
			name "TestMaven"
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}
